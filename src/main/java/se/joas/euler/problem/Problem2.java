package se.joas.euler.problem;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
 */

public final class Problem2 {

    /**
     * Finds the sum of the even Fibonacci terms.
     * 
     * @param limit
     *            Maximum size of a term
     * @return The sum of the even terms in the Fibonacci sequence up to the
     *         limit
     */
    public static long findSumOfEvenTermsFibonacci(long limit) {

        if (limit < 0) {
            throw new IllegalArgumentException("The limit must be a positive number");
        }

        long evenSum = 0;
        long lastFibonacciTerm = 1;
        long fibonacciTerm = 1;
        long tempFibonacciTermHolder;
        while (fibonacciTerm <= limit) {
            if (fibonacciTerm % 2 == 0) {
                evenSum = Math.addExact(evenSum, fibonacciTerm);
            }
            tempFibonacciTermHolder = fibonacciTerm;
            fibonacciTerm = Math.addExact(fibonacciTerm, lastFibonacciTerm);
            lastFibonacciTerm = tempFibonacciTermHolder;
        }

        return evenSum;
    }
}
